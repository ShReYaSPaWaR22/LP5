#include <iostream>
#include <cuda_runtime.h>

using namespace std;

__global__ void addVectors(int* A, int* B, int* C, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    int n = 1000000;
    int* A, * B, * C;
    cudaMallocHost(&A, n * sizeof(int));
    cudaMallocHost(&B, n * sizeof(int));
    cudaMallocHost(&C, n * sizeof(int));
    for (int i = 0; i < n; i++) {
        A[i] = i;
        B[i] = i * 2;
    }

    int* dev_A, * dev_B, * dev_C;
    cudaMalloc(&dev_A, n * sizeof(int));
    cudaMalloc(&dev_B, n * sizeof(int));
    cudaMalloc(&dev_C, n * sizeof(int));

    cudaMemcpy(dev_A, A, n * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dev_B, B, n * sizeof(int), cudaMemcpyHostToDevice);

    addVectors<<<(n + 255) / 256, 256>>>(dev_A, dev_B, dev_C, n);

    cudaMemcpy(C, dev_C, n * sizeof(int), cudaMemcpyDeviceToHost);

    for (int i = 0; i < 10; i++) {
        cout << C[i] << " ";
    }
    cout << endl;

    cudaFree(dev_A);
    cudaFree(dev_B);
    cudaFree(dev_C);
    cudaFreeHost(A);
    cudaFreeHost(B);
    cudaFreeHost(C);

    return 0;
}
